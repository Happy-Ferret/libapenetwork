#!/usr/bin/python
import os 

from konstructor import Deps
from konstructor import CommandLine
from konstructor import Build
from konstructor import Builder
from konstructor import Platform
from konstructor import Variables
from konstructor import Konstruct

Gyp = Builder.Gyp

DEPEDENCY_REPO = "http://deps.nidium.com"

Platform.setEnviron("CC=clang", "CXX=clang++")

Gyp.setArgs("--depth=./")
Gyp.setExec("third-party/gyp/gyp")

@Deps.register("gyp")
def gyp():
    return {
        "location": Deps.SvnRepo("http://gyp.googlecode.com/svn/trunk/", revision=1967),
        "patchs": ["gyp.patch"]
    }

@Deps.register("c-ares")
def cares():
    return {
        "location": DEPEDENCY_REPO + "/c-ares-1.9.1.tar.gz",
        "build": ["./configure", "make"],
        "outputs": [".libs/libcares.a"]
    }

@Deps.register("openssl")
def openssl():
    configure = "./config"
    if Platform.system == "Darwin":
        configure = "./Configure darwin64-x86_64-cc -no-shared"

    return {
        "location": DEPEDENCY_REPO + "/openssl-1.0.1g.tar.gz",
        "build": [configure, "make build_crypto", "make build_ssl"],
        "outputs": ["libssl(.a|.lib)", "libcrypto(.a|.lib)"]
    }

#####

@CommandLine.option("--debug", default=False)
def debug(debug):
    if debug:
        Variables.set("debug", True)
        Gyp.setConfiguration("Debug");
        Konstruct.setConfigs("debug")

@CommandLine.option("--third-party-path", default="")
def gypConfig(thirdPartyPath):
    if thirdPartyPath:
        Deps.setDir(thirdPartyPath)
        Gyp.set("third_party", thirdPartyPath)
        Gyp.setExec(os.path.join(thirdPartyPath, "gyp", "gyp"))

#####

Deps.set("gyp", "c-ares", "openssl")
Variables.set("depsRepo", DEPEDENCY_REPO)

# Temporary fix to make deps.py & Konstructor works 
Gyp.set("native_output", "../build/")
Gyp.set("native_output_third_party", "../build/third-party/")

if __name__ == '__main__':
    Build.add(Gyp("gyp/network.gyp"));
    Konstruct.start() 
