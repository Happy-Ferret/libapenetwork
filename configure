#!/usr/bin/python
import os 

from konstructor import Deps
from konstructor import CommandLine
from konstructor import Build
from konstructor import Builder
from konstructor import Platform
from konstructor import Variables as Var
from konstructor import Konstruct
from konstructor import Utils
from konstructor import ROOT

Gyp = Builder.Gyp

DEPEDENCY_REPO = "http://deps.nidium.com"

Platform.setEnviron(
    "CC=clang",
    "CXX=clang++", 
    #"CXXFLAGS=-stdlib=libc++",
    #"LDFLAGS=-stdlib=libc++",
    "MACOSX_DEPLOYMENT_TARGET=10.7"
)

Gyp.setArgs("--depth=./")
Gyp.setExec("third-party/gyp/gyp")

@Deps.register("gyp")
def gyp():
    return {
        "location": Deps.SvnRepo("http://gyp.googlecode.com/svn/trunk/", revision=1967),
        "patchs": ["gyp.patch"]
    }

@Deps.register("c-ares")
def cares():
    configure = "./configure"
    if Konstruct.config("android"):
        configure += " --host=" + Var.get("targetTriplet")

    return {
        "location": DEPEDENCY_REPO + "/c-ares-1.9.1.tar.gz",
        "build": [configure, "make"],
        "outputs": [".libs/libcares.a"]
    }

@Deps.register("openssl")
def openssl():
    configure = "./config"
    if Konstruct.config("android"):
        configure = "MACHINE=armv7 SYSTEM=android CROSS_COMPILE= ARCH=arm ANDROID_DEV=" + Var.get("toolchainPath") +"/sysroot/ HOSTCC=" + Platform.getEnviron("CC") + " " + configure
    elif  Platform.system == "Darwin":
        configure = "./Configure darwin64-x86_64-cc -no-shared"

    return {
        "location": DEPEDENCY_REPO + "/openssl-1.0.1g.tar.gz",
        "build": [configure, "make build_crypto", "make build_ssl"],
        "outputs": ["libssl(.a|.lib)", "libcrypto(.a|.lib)"]
    }

@Deps.register("gperftools")
def gperftools():
    return {
        "location": "https://googledrive.com/host/0B6NtGsLhIcf7MWxMMF9JdTN3UVk/gperftools-2.2.1.zip",
        "build": ["autoconf", "./configure", "make"],
        "outputs": [[".libs/libprofiler.so.0$", "libprofiler.so"], {"src": "src/pprof", "dest": "../../tools/pprof"}]
    }

#####

@CommandLine.option("--cpu-profiling", default=False)
def profiler(profiler):
    if profiler:
        Gyp.set("profiler", 1)
        Deps.set("gperftools")
        Platform.exportEnviron("CPUPROFILE=/tmp/profile.nidium")
        Platform.exportEnviron("LD_LIBRARY_PATH=" + ROOT + "/build/third-party/${LD_LIBRARY_PATH:+:}${LD_LIBRARY_PATH:-}")

@CommandLine.option("--debug", default=False)
def debug(debug):
    if debug:
        Var.set("debug", True)
        Gyp.setConfiguration("Debug");
        Konstruct.setConfigs(["debug"])

@CommandLine.option("--third-party-path", default="")
def gypConfig(thirdPartyPath):
    if thirdPartyPath:
        Deps.setDir(thirdPartyPath)
        Variables.set("thirdPartyPath", thirdPartyPath)
        Gyp.set("third_party", thirdPartyPath)
        Gyp.setExec(os.path.join(thirdPartyPath, "gyp", "gyp"))

@CommandLine.option("--target-cpu", default="")
def targetCpu(cpu):
    Gyp.set("target_cpu", cpu)
    Var.set("target_cpu", cpu);

@CommandLine.option("--target-os", default="")
def targetCpu(cpu):
    Gyp.set("target_os", cpu)
    Var.set("target_os", cpu);

@CommandLine.option("--android", default=False)
def android(android):
    if android:
        Gyp.set("target_cpu", Var.get("target_cpu", "arm"));
        Gyp.set("target_os", "android");

        Konstruct.setConfigs(["android"])

        hostArch = "x86" if Platform.wordSize == 32 else "x64"
        toolchainPath = "build/toolchain/android/"
        androidNdkPath = "/home/efyx/dev/android/android-ndk-r10d/"

        if not os.path.isdir(toolchainPath):
            Utils.mkdir(toolchainPath)
            Utils.run("%s/build/tools/make-standalone-toolchain.sh \
                    --platform=android-19 --install-dir=%s --arch=arm \
                    --llvm-version=3.4" % (androidNdkPath, toolchainPath))

        Var.set("toolchainPath", toolchainPath);

        # FIXME : Should be command line argument
        Var.set("androidPlatform", "android-14")
        Var.set("targetTriplet", "arm-linux-androideabi")

        Platform.setEnviron(
            "ANDROID_NDK_ROOT=%s" % (androidNdkPath), 
            "ANDROID_SDK_ROOT=/home/efyx/dev/android/android-sdk-linux_x86/",
            "AR=%s/bin/arm-linux-androideabi-ar" % toolchainPath, 
            "CC=%s/bin/arm-linux-androideabi-gcc" % toolchainPath, 
            "CXX=%s/bin/arm-linux-androideabi-g++" % toolchainPath, 
            "RANLIB=%s/bin/arm-linux-androideabi-ranlib" % toolchainPath,
            "LD=%s/bin/ld.mcld" % toolchainPath, 
            "CFLAGS=--target=" + Var.get("targetTriplet")
        )


@Konstruct.preBuild
def preBuild():
    if not Konstruct.config("android"):
        return

    # Many of our dependencies does not support cross compiling against clang
    # but Nidium (at least NativeJSCore) only build with clang
    # So switch to clang/llvm for building Nidium
    #
    # FIXME : This approach is basically broken and uber wrong. 
    # We should either move all dependency to gyp/clang or make Nidium compatible with g++ 
    toolchainPath = Var.get("toolchainPath");
    Platform.setEnviron( 
        "CC=%s/bin/arm-linux-androideabi-clang" % toolchainPath, 
        "CXX=%s/bin/arm-linux-androideabi-clang++ --sysroot=/mnt/stockage/dev/wtf/sysroot/" % toolchainPath, 
        "RANLIB=%s/bin/arm-linux-androideabi-ranlib" % toolchainPath,
        "LD=%s/bin/ld.mcld" % toolchainPath, 
        "CFLAGS=--target=" + Var.get("targetTriplet")
    )

@CommandLine.option("--asan", default=False)
def asan(asan):
    if asan:
        Gyp.set("asan", 1)

####

Deps.set("gyp", "c-ares", "openssl")
Var.set("depsRepo", DEPEDENCY_REPO)

# Temporary fix to make deps.py & Konstructor works 
Gyp.set("native_output", "../build/")
Gyp.set("native_output_third_party", "../build/third-party/")

if __name__ == '__main__':
    Build.add(Gyp("gyp/network.gyp"));
    Konstruct.start() 
